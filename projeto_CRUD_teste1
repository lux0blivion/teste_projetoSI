import sqlite3
import re 
conn = sqlite3.connect("alem_do_mapa.db")
cursor = conn.cursor()

# criaçao da tabela de usuarios e estabelecimentos 

cursor.execute("DROP TABLE IF EXISTS usuarios")
cursor.execute("DROP TABLE IF EXISTS estabelecimentos")

cursor.execute("CREATE TABLE IF NOT EXISTS usuarios (id INTEGER PRIMARY KEY AUTOINCREMENT, nome TEXT NOT NULL, email TEXT UNIQUE NOT NULL, senha TEXT NOT NULL, interesses TEXT NOT NULL, regiao TEXT NOT NULL)")
cursor.execute("CREATE TABLE IF NOT EXISTS estabelecimentos (id INTEGER PRIMARY KEY AUTOINCREMENT, nome TEXT NOT NULL, email TEXT UNIQUE NOT NULL, senha TEXT NOT NULL,endereco TEXT NOT NULL,interesses TEXT NOT NULL, bio TEXT NOT NULL)")
conn.commit()

# validaçoes 

def email_valido(email):
    padrao = r'^[\w\.-]+@(gmail\.com|hotmail\.com)$'
    return re.match(padrao, email)
def senha_valida(senha):
    if ' ' in senha:
        return False
    if len(senha) < 8:
        return False
    if not re.search(r'[A-Za-z]', senha):
        return False
    if not re.search(r'[0-9]', senha):
        return False
    return True

# cadastro de usuarios 

def criar_usuario():
     print("=== Cadastro de Usuário ===")
nome = input("Nome: ")
while True:
    email = input('Email:')
    if not email_valido(email):
        print("❌ Email inválido. Use apenas '@gmail.com' ou '@hotmail.com")
    else:
        break  

while True:
    senha = input("Senha (mínimo 8 caracteres, com letras e números): ")
    if not senha_valida(senha):
        print("❌ Senha fraca.")
    else:
        break    

while True:
    interesses = input("Interesses: ").strip()
    if not interesses:
        print("❌ Campo obrigatório.")
    else:
        break

while True:        
    regiao = input("Região:").strip()
    if not regiao:
        print("❌ Campo obrigatório.")
    else:
        break
try:
        cursor.execute("INSERT INTO usuarios (nome, email, senha, interesses, regiao) VALUES (?, ?, ?, ?, ?)",
            (nome,email,senha,interesses, regiao))
        conn.commit()
        print("✅ Usuário cadastrado com sucesso!\n")
except sqlite3.IntegrityError:
        print("❌ Email já cadastrado.\n")

# Cadastro de Estabelecimento

def criar_estabelecimento():
    print("=== Cadastro de Estabelecimento ===")

    while True:
        nome = input("Nome do estabelecimento: ").strip()
        if not nome:
            print("❌ Campo obrigatório.")
        else:
            break

    while True:
        email = input("Email do estabelecimento (@gmail.com ou @hotmail.com): ").strip()
        if not email_valido(email):
            print("❌ Email inválido. Use apenas @gmail.com ou @hotmail.com")
        else:
            break

    while True:
        senha = input("Senha (mínimo 8 caracteres, com letras, números e *sem espaços*): ")
        if not senha_valida(senha):
            print("❌ Senha inválida. Use pelo menos 8 caracteres, com letras, números e sem espaços.")
        else:
            break

    while True:
        endereco = input("Endereço: ").strip()
        if not endereco:
            print("❌ Campo obrigatório.")
        else:
            break

    while True:
        interesses = input("Interesses associados (ex: cultura, culinária): ").strip()
        if not interesses:
            print("❌ Campo obrigatório.")
        else:
            break

    while True:
        bio = input("Bio ou apresentação: ").strip()
        if not bio:
            print("❌ Campo obrigatório.")
        else:
            break
    try:
        cursor.execute(""" INSERT INTO estabelecimentos (nome, email, senha, endereco, interesses, bio)  VALUES (?, ?, ?, ?, ?, ?)""", 
            (nome, email, senha, endereco, interesses, bio))
        conn.commit()
        print("✅ Estabelecimento cadastrado com sucesso!\n")
    except sqlite3.IntegrityError:
        print("❌ Este email já está cadastrado.\n")
# Atualização de usuário

def atualizar_usuario():
    print("=== Atualizar Usuário ===")
    id_usuario = input("ID do usuário: ")

    cursor.execute("SELECT * FROM usuarios WHERE id=?", (id_usuario,))
    usuario = cursor.fetchone()

    if not usuario:
        print("❌ Usuário não encontrado.")
        return

    print(f"Usuário atual: {usuario}")

    nome = input("Novo nome (Enter para manter): ") or usuario[1]
    email = input("Novo email (Enter para manter): ") or usuario[2]
    senha = input("Nova senha (Enter para manter): ") or usuario[3]
    interesses = input("Novos interesses (Enter para manter): ") or usuario[4]
    regiao = input("Nova região (Enter para manter): ") or usuario[5]

    cursor.execute("""
    UPDATE usuarios SET nome=?, email=?, senha=?, interesses=?, regiao=? WHERE id=?
    """, (nome, email, senha, interesses, regiao, id_usuario))
    conn.commit()
    print("✅ Usuário atualizado com sucesso.\n")

# Exclusão de usuário
def excluir_usuario():
    print("=== Excluir Usuário ===")
    id_usuario = input("ID do usuário: ")

    cursor.execute("SELECT * FROM usuarios WHERE id=?", (id_usuario,))
    usuario = cursor.fetchone()

    if not usuario:
        print("❌ Usuário não encontrado.")
        return

    confirm = input(f"Tem certeza que deseja excluir '{usuario[1]}'? (s/n): ")
    if confirm.lower() == 's':
        cursor.execute("DELETE FROM usuarios WHERE id=?", (id_usuario,))
        conn.commit()
        print("✅ Usuário excluído com sucesso.\n")
    else:
        print("❌ Operação cancelada.\n")

# Atualização de Estabelecimento
def atualizar_estabelecimento():
    print("=== Atualizar Estabelecimento ===")
    id_est = input("ID do estabelecimento: ")

    cursor.execute("SELECT * FROM estabelecimentos WHERE id=?", (id_est,))
    est = cursor.fetchone()

    if not est:
        print("❌ Estabelecimento não encontrado.")
        return

    print(f"Estabelecimento atual: {est}")

    nome = input("Novo nome (Enter para manter): ") or est[1]
    endereco = input("Novo endereço (Enter para manter): ") or est[2]
    interesses = input("Novos interesses (Enter para manter): ") or est[3]
    bio = input("Nova bio (Enter para manter): ") or est[4]

    cursor.execute("""
    UPDATE estabelecimentos SET nome=?, endereco=?, interesses=?, bio=? WHERE id=? """, (nome, endereco, interesses, bio, id_est))
    conn.commit()
    print("✅ Estabelecimento atualizado com sucesso.\n")

# Exclusão de Estabelecimento
def excluir_estabelecimento():
    print("=== Excluir Estabelecimento ===")
    id_est = input("ID do estabelecimento: ")

    cursor.execute("SELECT * FROM estabelecimentos WHERE id=?", (id_est,))
    est = cursor.fetchone()

    if not est:
        print("❌ Estabelecimento não encontrado.")
        return

    confirm = input(f"Deseja realmente excluir '{est[1]}'? (s/n): ")
    if confirm.lower() == 's':
        cursor.execute("DELETE FROM estabelecimentos WHERE id=?", (id_est,))
        conn.commit()
        print("✅ Estabelecimento excluído.\n")
    else:
        print("❌ Operação cancelada.\n")

#  Menu Peincipal 
def menu():
    while True:
        print("\n=== MENU ALÉM DO MAPA ===")
        print("1. Cadastrar Usuário")
        print("2. Cadastrar Estabelecimento")
        print("3. Atualizar Usuário")
        print("4. Atualizar Estabelecimento")
        print("5. Excluir Usuário")
        print("6. Excluir Estabelecimento")
        print("7. Sair")
        escolha = input("Escolha uma opção: ")

        if escolha == "1":
            criar_usuario()
        elif escolha == "2":
            criar_estabelecimento()
        elif escolha == "3":
            atualizar_usuario()
        elif escolha == "4":
            atualizar_estabelecimento()
        elif escolha == "5":
            excluir_usuario()
        elif escolha == "6":
            excluir_estabelecimento()
        elif escolha == "7":
            print("Saindo...")
            break
        else:
            print("❌ Opção inválida. Tente novamente.")

menu()
conn.close()